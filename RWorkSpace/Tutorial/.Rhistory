li
?append
append
names(data)
names(data$Dati.) <- c("Banane")
names(data)
names(data) <- c("Banana")
names(data)
names(data)[2]
names(data)[2][3]
names(data)[c(2,3)]
data <- data.frame(
"Dati:" = c(paste("Dato", 1:8, sep = "")),
val.num = c(3.45, 5.67, 1.45, 4.56, 8.09, 3.11, 1.40, 7.73),
val.car. = c("ATTA", "TGAT", "TATA", "TGAG", "CCCG", "CATG", "TGAG", "GGAC"),
val.log. = c(TRUE, FALSE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE),
val.num = c(0.45, 0.91, 3.78, 8.03, 8.09, 4.56, 1.80, 5.90),
val.car = c("CCAT", "TATT", "CCCC", "GAGA", "AGAG", "ATAT", "GCTA", "TGAT")
)
names(data)[c(1,2)] <- c("Banana", "Ciao")
names(data)
c('I\'m very hungry') # Quotes are escaped with \, but \\ is printed as "\\".
Lst <- list( some.numbers    = c(1,2,3),
some.characters = c("Banana", "Papaya"),
some.matrix     = matrix(1:20, nr=5),
some.inception  = list(c("Inception")),
some.array      = array(1:30, dim=c(2,3,2)))
Lst # Try and look inside the list
Lst$some.array[2,1,1]
Lst$some.array[2,,1]
Lst <- list( X1 = c(1,2,3,4,5),
X2 = c(1,2,3,NA,"Guava"),
X3 = c("Null",2,3,4,NaN),
X4 = c("Papaya", "Banana", "Guava", "2", 123)
)
Dframe <-  data.frame(Lst)
Dframe # Try and print the Data frame out. See how data.frame fills in columns first.
li<-l ist(m=matrix(rnorm(64),nrow=8),s=c(rep("T",3),rep("G",5)))
li<-list(      m=matrix(rnorm(64),nrow=8),s=c(rep("T",3),rep("G",5)))
D1 <- data.frame(
c(1, 2),
c(3, 4),
c("Banana", "Papaya"),
c("Guava", "Potato")
)
?write.table
myDF <- data.frame(matrix(1:40, nrow = 5))
myDF
D1
data("Titanic")
Titanic
str(Titanic)
summary(Titanic)
x = rnorm(100)
table(x)
setwd("C:/Users/hedma/Data/Università/Corsi/0 - Completati/EIDS/Lezioni Statistica/Prove D'esame Statistica")
read.csv2("Data.csv") -> D
summary(D)
str(D)
D
summary(D$chol)
sd(D$chol) ; sd(D$chol)/mean(D$chol)
sd(D$chol, na.rm = TRUE) ; sd(D$chol, na.rm = TRUE)/mean(D$chol, na.rm = TRUE)
qqnorm(D$chol)
qqnorm(D$chol) ; qqline(D$chol)
shapiro.test(D$chol)
ks.test(D$chol, "pnorm", sd = sd(D$chol), mean = mean(D$chol))
ks.test(D$chol, "pnorm", sd = sd(D$chol, na.rm = TRUE), mean = mean(D$chol, na.rm = TRUE))
boxplot(D$chol)
order(D$chol)
sort(D$chol)
shapiro.test(D$chol[D$chol < 301]) # P-value minore di 0.05: non è normale
qqnorm(D$chol[D$chol < 301]) ; qqline(D$chol)
?hist
hist(D$chol, breaks=12)
hist(D$chol, breaks=15)
hist(D$chol, breaks=20)
hist(D$chol, breaks=25)
hist(D$chol, breaks=100)
hist(D$chol, breaks=20)
D$chol < 301
shapiro.test(D$chol[D$chol < 301 & D$chol > 99]) # P-value minore di 0.05: non è normale
D$chol[D$chol < 301 & D$chol > 99]
radq(length(D$chol))
sqrt(length(D$chol))
hist(D$chol, breaks=14)
cor.test(D$ratio, D$hdl)
?lm
model -> lm(D$ratio ~ D$hdl)
model <- lm(D$ratio ~ D$hdl)
summary(model)
plot(D$ratio, D$hdl)
abline(model)
model <- lm(D$hdl ~ D$ratio)
abline(model)
summary(model)
A <- c(0.05,0.5,5)
b <- c(0.0675,0.613,1.26)
a <- c(0.05,0.5,5)
b <- c(0.0675,0.613,1.26)
plot(a,b)
plot(b,a)
cor.test(b,a)
?lm
lm(b~a)
lm(b~a) -> mo
summary(mo)
mo
lm(b~a-1) -> mo2
summary(mo2)
a <- c(5, 10, 20, 40)
b <- c(0.2581, 0.4893, 0.8959, 1.4287)
plot(b,a)
cor.test(b,a)
lm(b~a) -> mo
summary(mo)
abline(mo)
plot(b,a)
lm(b~a) -> mo
summary(mo)
abline(mo)
lm(a~b) -> mo
cor.test(b,a)
lm(a~b) -> mo
summary(mo)
abline(mo)
lm(a~b-1) -> mo
summary(mo)
abline(mo)
plot(b,a)
abline(mo)
b <- c(5, 10, 20, 40)
a <- c(0.2581, 0.4893, 0.8959, 1.4287)
plot(b,a)
cor.test(b,a)
lm(a~b-1) -> mo
summary(mo)
abline(mo)
b <- c(5, 10, 20, 40)
a <- c(0.2581, 0.4893, 0.8959, 1.4287)
plot(b,a)
cor.test(b,a)
lm(a~b-1) -> mo
summary(mo)
abline(mo)
conc <- c(5, 10, 20, 40)
abs <- c(0.2581, 0.4893, 0.8959, 1.4287)
plot(b,a)
cor.test(b,a)
lm(a~b-1) -> mo
summary(mo)
abline(mo)
conc <- c(5, 10, 20, 40)
abs <- c(0.2581, 0.4893, 0.8959, 1.4287)
plot(abs,conc)
cor.test(abs,conc)
lm(conc~abs-1) -> mo
summary(mo)
abline(mo)
conc <- c(5, 10, 20, 40)
abs <- c(0.2581, 0.4893, 0.8959, 1.4287)
plot(conc,abs)
cor.test(conc,abs)
lm(abs~conc-1) -> mo
summary(mo)
abline(mo)
mo$coefficients
cor.test(conc,abs)
cor.test(conc,abs)-> cor
bradford <- function(conc, abs){
plot(conc,abs)
cor.test(conc,abs) -> cor
lm(abs~conc-1) -> mo
summary(mo)
abline(mo)
print(c("Intercept is 0; Coefficient is ", mo$coefficients))
print(c("Model quality (R-squared): ", cor$estimate))
invisible()}
bradford(conc = conc, abs = abs)
bradford <- function(conc, abs){
plot(conc,abs)
cor.test(conc,abs) -> cor
lm(abs~conc-1) -> mo
summary(mo)
abline(mo)
print(c("Intercept is 0; Coefficient is ", as.numeric(mo$coefficients)))
print(c("Model quality (R-squared): ", as.numeric(cor$estimate)))
invisible()}
bradford(conc = conc, abs = abs)
bradford <- function(conc, abs){
plot(conc,abs)
cor.test(conc,abs) -> cor
lm(abs~conc-1) -> mo
summary(mo)
abline(mo)
print(c("Intercept is 0; Coefficient is ", as.numeric(mo$coefficients)),
digits = 5, quote = FALSE)
print(c("Model quality (R-squared): ", as.numeric(cor$estimate)),
digits = 5, quote = FALSE)
invisible()}
bradford(conc = conc, abs = abs)
bradford <- function(conc, abs){
plot(conc,abs)
cor.test(conc,abs) -> cor
lm(abs~conc-1) -> mo
summary(mo)
abline(mo)
print(c("Intercept is 0; Coefficient is", as.numeric(mo$coefficients)),
digits = 5, quote = FALSE)
print(c("Model quality (R-squared):", as.numeric(cor$estimate)),
digits = 5, quote = FALSE)
invisible()}
bradford(conc = conc, abs = abs)
bradford <- function(conc, abs){
plot(conc,abs)
cor.test(conc,abs) -> cor
lm(abs~conc-1) -> mo
summary(mo)
abline(mo)
print("Intercept is 0; Coefficient is", as.numeric(mo$coefficients),
digits = 5, quote = FALSE)
print("Model quality (R-squared):", as.numeric(cor$estimate),
digits = 5, quote = FALSE)
invisible()}
bradford(conc = conc, abs = abs)
bradford <- function(conc, abs){
plot(conc,abs)
cor.test(conc,abs) -> cor
lm(abs~conc-1) -> mo
summary(mo)
abline(mo)
print(c("Intercept is 0; Coefficient is", as.numeric(mo$coefficients)),
digits = 5, quote = FALSE)
print(c("Model quality (R-squared):", as.numeric(cor$estimate)),
digits = 5, quote = FALSE)
invisible()}
bradford(conc = conc, abs = abs)
bradford <- function(conc, abs){
plot(conc,abs)
cor.test(conc,abs) -> cor
lm(abs~conc-1) -> mo
summary(mo)
abline(mo)
print("Intercept is 0")
print(c("Coefficient is", round(as.numeric(mo$coefficients)), 5),
quote = FALSE)
print(c("Model quality (R-squared):", round(as.numeric(cor$estimate)), 5),
quote = FALSE)
invisible()}
bradford(conc = conc, abs = abs)
bradford <- function(conc, abs){
plot(conc,abs)
cor.test(conc,abs) -> cor
lm(abs~conc-1) -> mo
summary(mo)
abline(mo)
print("Intercept is 0")
print(c("Coefficient is", round(as.numeric(mo$coefficients), 5)),
quote = FALSE)
print(c("Model quality (R-squared):", round(as.numeric(cor$estimate), 5)),
quote = FALSE)
invisible()}
conc <- c(5, 10, 20, 40)
abs <- c(0.2581, 0.4893, 0.8959, 1.4287)
bradford(conc = conc, abs = abs)
bradford <- function(conc, abs){
plot(conc,abs)
cor.test(conc,abs) -> cor
lm(abs~conc-1) -> mo
summary(mo)
abline(mo)
print("Intercept is 0", quote = FALSE)
print(c("Coefficient is", round(as.numeric(mo$coefficients), 5)),
quote = FALSE)
print(c("Model quality (R-squared):", round(as.numeric(cor$estimate), 5)),
quote = FALSE)
invisible()}
bradford(conc = conc, abs = abs)
bradford <- function(conc, abs){
plot(conc,abs)
cor.test(conc,abs) -> cor
lm(abs~conc-1) -> mo
summary(mo)
abline(mo)
print("Intercept is 0", quote = FALSE)
print(c("Coefficient is", round(as.numeric(mo$coefficients), 5)),
quote = FALSE)
print(c("Model quality (R-squared):", round(as.numeric(cor$estimate), 5)),
quote = FALSE)
invisible()}
bradford(conc = conc, abs = abs)
bradford <- function(conc, abs, inter = FALSE){
plot(conc,abs)
cor.test(conc,abs) -> cor
if(inter == FALSE){
lm(abs~conc-1) -> mo
}else{
lm(abs~conc) -> mo
}
summary(mo)
abline(mo)
print("Intercept is 0", quote = FALSE)
print(c("Coefficient is", round(as.numeric(mo$coefficients), 5)),
quote = FALSE)
print(c("Model quality (R-squared):", round(as.numeric(cor$estimate), 5)),
quote = FALSE)
invisible()}
bradford(conc = conc, abs = abs)
lb.model <- function(conc, abs, inter = FALSE){
plot(conc,abs)
cor.test(conc,abs) -> cor
if(inter == FALSE){
lm(abs~conc-1) -> mo
}else{
lm(abs~conc) -> mo
}
summary(mo)
abline(mo)
print("Intercept is 0", quote = FALSE)
print(c("Coefficient is", round(as.numeric(mo$coefficients), 5)),
quote = FALSE)
print(c("Model quality (R-squared):", round(as.numeric(cor$estimate), 5)),
quote = FALSE)
invisible()}
lb.model(conc = conc, abs = abs)
conc <- c(5, 10, 20, 40)
abs <- c(0.2581, 0.4893, 0.8959, 1.4287)
lb.model <- function(conc, abs, inter = FALSE){
plot(conc,abs)
cor.test(conc,abs) -> cor
if(inter == FALSE){
lm(abs~conc-1) -> mo
}else{
lm(abs~conc) -> mo
}
summary(mo)
abline(mo)
print("Intercept is 0", quote = FALSE)
print(c("Coefficient is", round(as.numeric(mo$coefficients), 5)),
quote = FALSE)
print(c("Model quality (R-squared):", round(as.numeric(cor$estimate), 5)),
quote = FALSE)
invisible()}
lb.model(conc = conc, abs = abs)
lb.model(conc = conc, abs = abs, inter = TRUE)
lb.model(conc = conc, abs = abs)
lb.model(conc = conc, abs = abs, inter = TRUE)
lm(abs~conc-1) -> mo
lm(abs~conc) -> mo
lb.model <- function(conc, abs, inter = FALSE){
plot(conc,abs)
cor.test(conc,abs) -> cor
# Calculate or not the model with the intercept
if(inter == FALSE){
lm(abs~conc-1) -> mo
print("Intercept is 0", quote = FALSE)
print(c("Coefficient is", round(as.numeric(mo$coefficients), 5)),
quote = FALSE)
}else{
lm(abs~conc) -> mo
print(c("Intercept is", round(as.numeric(mo$coefficients[1]), 5)),
quote = FALSE)
print(c("Coefficient is", round(as.numeric(mo$coefficients[2]), 5)),
quote = FALSE)
}
abline(mo)
print(c("Model quality (R-squared):", round(as.numeric(cor$estimate), 5)),
quote = FALSE)
invisible()}
lb.model(conc = conc, abs = abs)
lb.model(conc = conc, abs = abs, inter = TRUE)
x=1:40
y=x^2
z=x^2+3*x # Setting some variables
plot(x,y,t="l") # Create the plot
lines(x,z,col="red") # Add a red line, with x and y coordinates.
points(40,500,col="blue",t="p") # Add a single blue point @ 40,500
text(20,1000,"Label",col="green") # Add a green "label" @ 20, 1000
polygon(c(10,20,30),c(1000,1200,1500),col="pink")
legend(10,1500,              # Add a legend @ top-left coordinates 10,1500,with
c("Line 1","Line 2"), # two line types of names "Line 1" and "line 2",
lty=c(1,1),           # of line types (lty) 1 and 1,
col=c("red","black")) # of colour red and black.
title("Test1") # Set the title of the plot to "Test1"
axis(4, col = "gold", lty = 2, lwd = 0.5) # Add a new axes, of linetype 2
x <- c(1, 3, 10+0i, TRUE) # Again, everything is a complex number now. TRUE = 1
x
x <- c(1:20) # Matrices need to be created from a vector
dim(x) <- c(4,5) # dim(x) is the dimension vector of x.
length(x) == prod(dim(x)) # This must always return TRUE.
matrix(nr = 3, nc = 5) # This creates and empty (NA - filled) matrix of
# 3 rows and 5 columns.
matrix(nr = 5, nc = 5, data = x)
x[1,3] # Always ROW, COLUMN
x[2,]  # Not giving an index selects the whole row or column
x[,4]
colnames(x) <- paste(rep("X", 5), 1:5, sep="")
rownames(x) <- paste(rep("Exp", dim(x)[1]), c(1:dim(x)[1]), sep="")
# Creative use of dim()!
x #Try and call x
x[,"X2"] # This returns a vector with column 2 inside
x["Exp1",] # This returns a vector with row 2 inside.
x["Exp3", "X5"]
x[c("Exp3", "Exp4"), "X3"]
x <- c(1:40)
dim(x) <- c(2,5,4)
array(x, dim = c(2,5,2))
named <- array( data     = 1:12,
dim      = c(3, 3, 3),
dimnames = list( c("A", "B", "C"), # column names...
c("D", "E", "F"), #
c("G", "H", "I")
))
a <- array("A", dim= c(2,3))
b <- array("B", dim= c(2,3))
cbind(a,b)
cbind(b,a) # Order is important.
rbind(a,b)
rbind(b,a) # ORDER IS IMPORTANT!
x <- array(1:12, dim=c(3:4))
rownames(x) <- c("Name 1", "Name 2", "Name 3")
colnames(x) <- c("Col 1", "Col 2", "Col 3", "Col 4")
x
a <- array(1:20, dim = c(2,4))
b <- array(45:1, dim = c(2,4))
a+b ; a*b ; a / b ; a ^ b # Since a and b have the same dim(), this is doable.
c <- array(20:25, dim = c(3,2))
a + c ; b * c ; c ^ b # Error, error, error.
a <- array(1:6, dim=c(2,3))
mean(a)
prod(a)
log(a)
apply(a, 1, sum)
apply(a, 2, sum)
apply(a, 1, prod)
apply(a, 2, mean)
x <- c(1,1,1,1,2,2,2,3,3,3,3,1,1,1,2,1,1,3,3,3,3,3,1,1,1,1,2,2,2,3,3,3,3,2,2,1,2,2,1,1,1)
fx <- factor(x)
fx # Printing out the factor specifies its levels
mean(fx)
mean(as.numeric(fx))
sample.type <- c("same", "same", "more", "same", "less", "more", "less", "more", "more", "less")
sample.count <- c(120, 112, 320, 125, 61, 118, 73, 280, 250, 69)
f.sample.type <- factor(sample.type)  # First turn the sample types into a factor,
sample.means <- tapply(sample.count, f.sample.type, mean)
sample.means # We print out the result
tapply(sample.count, f.sample.type, max)
tapply(sample.count, f.sample.type, min)
Lst <- list( X1 = c(1,2,3,4,5),
X2 = c(1,2,3,NA,"Guava"),
X3 = c("Null",2,3,4,NaN),
X4 = c("Papaya", "Banana", "Guava", "2", 123)
)
Dframe <-  data.frame(Lst)
Dframe # Try and print the Data frame out. See how data.frame fills in columns first.
data(iris)
str(iris)
summary(iris)
data(CO2)
subset(CO2, CO2$Type == "Quebec")
subset(CO2, CO2$Type == "Quebec" & CO2$Treatment == "nonchilled")
x <- rnorm(100)
y <- rnorm(100)
plot(x) # This plots a scatterplot with x as the "Y" axis, and the index of x
x <- -10:10
y <- x^3 - 3*x -10
plot(x,y)
plot(x,y, type = "b")
plot(x,y, type = "l")
plot(x,y, type = "b")
plot(x,y, type = "l")
plot(x,y, type = "b")
plot(x,y, type = "b", xlab="X axis", ycol="Y axis")
plot(x,y, type = "b", xlab="X axis", ylab="Y axis")
warnings()
plot(x,y, main="My awesome plot!")
plot(iris)
boxplot(iris[c(1,2)], col = c("red", "blue"))
hist(iris[[2]])
z <- 20*(x^2)
plot(x,y, main= "My plot!", type = "b") # col can be used to color lines too!
lines(x,z, type = "b", col = "red")
plot(x,z, main= "My plot!", type = "b")
lines(x,y, type = "b", col = "red")
plot(x,y, type = "b", ylim = c(-2000, 2000))
source('C:/Users/hedma/Data/RWorkSpace/Tutorial/6_Rtutorial_plots.R', echo=TRUE)
plot(x,y, type = "b", ylim = c(-2000, 2000))
x <- -10:10
y <- x^3 - 3*x -10
plot(x,y, type = "b", ylim = c(-2000, 2000))
lines(x,z, type = "b", col = "red")
x <- 1 ; y <- 2
lines()
points(x,y) # Adds a point in x,y
text(x,y, label = "Banana") # Adds text in the coordinates x,y
abline(a,b) # Adds a line of inclination a that intercepts b.
polygon(x,y,z,...) # Adds a polygon with vertices x,y,z...
legend(x,y,legend) # Adds a legend at the x,y coordinates
x=1:40
y=x^2
z=x^2+3*x # Setting some variables
plot(x,y,t="l") # Create the plot
lines(x,z,col="red") # Add a red line, with x and y coordinates.
points(40,500,col="blue",t="p") # Add a single blue point @ 40,500
text(20,1000,"Label",col="green") # Add a green "label" @ 20, 1000
polygon(c(10,20,30),c(1000,1200,1500),col="pink")
legend(10,1500,              # Add a legend @ top-left coordinates 10,1500,with
c("Line 1","Line 2"), # two line types of names "Line 1" and "line 2",
lty=c(1,1),           # of line types (lty) 1 and 1,
col=c("red","black")) # of colour red and black.
title("Test1") # Set the title of the plot to "Test1"
axis(4, col = "gold", lty = 2, lwd = 0.5) # Add a new axes, of linetype 2
