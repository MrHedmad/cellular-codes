deck <- c(rep("C", norm), rep("D", damage))
result <- "NA"
enum <- 0
# Errors and warnings
if(length(deck) < draw | length(deck) < death){
stop("Deck legth too little")
}
if(repe < 100000){
warning("Repetitions might not be enough for a correct result")
}
# repeat as long as enumerator is less than repetition counter:
while(enum < repe){
# Draw (sample) the deck
x <- sample(deck, draw, replace = FALSE)
# How many death cards have been drawn?
D.num <- length(subset(x, x == "D"))
# If death cards lead to a death, count it, and repeat the loop
if(D.num >= death){
if(result == "NA"){
result <- 1}  # Cheat to reset result
result <- result + 1
}
enum <- enum + 1  # Enumerator for the loop
}
#
probability <- result/repe*100
cat("The probability to draw ", death, " death cards is ", probability, "%\n",
sep = "")
return(invisible(probability))
}
cards(25, 25, 6, 3, 100000)
banana <- cards(25,25,6,3,1000000)
cards(25, 25, 6, 3)
banana <- cards(25,25,6,3)
cards <- function(norm, damage, draw, death, repe = 250000){
# Calculate (roughly) the probability to draw >= "Death" "damage" cards in a
# single hand of size "draw"
# Create the deck
deck <- c(rep("C", norm), rep("D", damage))
result <- "NA"
enum <- 0
# Errors and warnings
if(length(deck) < draw | length(deck) < death){
stop("Deck legth too little")
}
if(repe < 100000){
warning("Repetitions might not be enough for a correct result")
}
# repeat as long as enumerator is less than repetition counter:
while(enum < repe){
# Draw (sample) the deck
x <- sample(deck, draw, replace = FALSE)
# How many death cards have been drawn?
D.num <- length(subset(x, x == "D"))
# If death cards lead to a death, count it, and repeat the loop
if(D.num >= death){
if(result == "NA"){
result <- 1}  # Cheat to reset result
result <- result + 1
}
enum <- enum + 1  # Enumerator for the loop
}
#
probability <- result/repe*100
cat("The probability to draw ", death, " death cards is ", probability, "%\n",
sep = "")
return(invisible(probability))
}
cards(25, 25, 6, 3)
cards(25, 25, 6, 100)
cards <- function(norm, damage, draw, death, repe = 250000){
# Calculate (roughly) the probability to draw >= "Death" "damage" cards in a
# single hand of size "draw"
# Create the deck
deck <- c(rep("C", norm), rep("D", damage))
result <- "NA"
enum <- 0
# Errors and warnings
if(length(deck) < draw | length(deck) < death){
stop("Deck length too little")
}
if(repe < 100000){
warning("Repetitions might not be enough for a correct result")
}
# repeat as long as enumerator is less than repetition counter:
while(enum < repe){
# Draw (sample) the deck
x <- sample(deck, draw, replace = FALSE)
# How many death cards have been drawn?
D.num <- length(subset(x, x == "D"))
# If death cards lead to a death, count it, and repeat the loop
if(D.num >= death){
if(result == "NA"){
result <- 1}  # Cheat to reset result
result <- result + 1
}
enum <- enum + 1  # Enumerator for the loop
}
#
probability <- result/repe*100
cat("The probability to draw ", death, " death cards is ", probability, "%\n",
sep = "")
return(invisible(probability))
}
cards(25, 25, 6, 3)
banana <- cards(25,25,6,3)
banana <- cards(25,25,6,3)
cards <- function(norm, damage, draw, death, repe = 250000){
# Calculate (roughly) the probability to draw >= "Death" "damage" cards in a
# single hand of size "draw"
# Create the deck
deck <- c(rep("C", norm), rep("D", damage))
result <- "NA"
enum <- 0
# Errors and warnings
if(length(deck) < draw | length(deck) < death){
stop("Deck length too little")
}
if(repe < 100000){
warning("Repetitions might not be enough for a correct result")
}
# repeat as long as enumerator is less than repetition counter:
while(enum < repe){
# Draw (sample) the deck
x <- sample(deck, draw, replace = FALSE)
# How many death cards have been drawn?
D.num <- length(subset(x, x == "D"))
# If death cards lead to a death, count it, and repeat the loop
if(D.num >= death){
if(result == "NA"){
result <- 1}  # Cheat to reset result
result <- result + 1
}
enum <- enum + 1  # Enumerator for the loop
}
# Calculate sperimental probability and return values
if(result == "NA"){
cat("It is impossible to die by drawing", death "cards.")
}else{
probability <- result/repe*100
cat("The probability to draw ", death, " death cards is ", probability, "%\n",
sep = "")
return(invisible(probability))
}
# Return values
}
cards <- function(norm, damage, draw, death, repe = 250000){
# Calculate (roughly) the probability to draw >= "Death" "damage" cards in a
# single hand of size "draw"
# Create the deck
deck <- c(rep("C", norm), rep("D", damage))
result <- "NA"
enum <- 0
# Errors and warnings
if(length(deck) < draw | length(deck) < death){
stop("Deck length too little")
}
if(repe < 100000){
warning("Repetitions might not be enough for a correct result")
}
# repeat as long as enumerator is less than repetition counter:
while(enum < repe){
# Draw (sample) the deck
x <- sample(deck, draw, replace = FALSE)
# How many death cards have been drawn?
D.num <- length(subset(x, x == "D"))
# If death cards lead to a death, count it, and repeat the loop
if(D.num >= death){
if(result == "NA"){
result <- 1}  # Cheat to reset result
result <- result + 1
}
enum <- enum + 1  # Enumerator for the loop
}
# Calculate sperimental probability and return values
if(result == "NA"){
cat("It is impossible to die by drawing", death, "cards.")
}else{
probability <- result/repe*100
cat("The probability to draw ", death, " death cards is ", probability, "%\n",
sep = "")
return(invisible(probability))
}
# Return values
}
cards(25, 25, 6, 3)
cards(25, 1, 6, 3)
cards <- function(norm, damage, draw, death, repe = 250000){
# Calculate (roughly) the probability to draw >= "Death" "damage" cards in a
# single hand of size "draw"
# Create the deck
deck <- c(rep("C", norm), rep("D", damage))
result <- "NA"
enum <- 0
# Errors and warnings
if(length(deck) < draw | length(deck) < death){
stop("Deck length too little")
}
if(repe < 100000){
warning("Repetitions might not be enough for a correct result")
}
# repeat as long as enumerator is less than repetition counter:
while(enum < repe){
# Draw (sample) the deck
x <- sample(deck, draw, replace = FALSE)
# How many death cards have been drawn?
D.num <- length(subset(x, x == "D"))
# If death cards lead to a death, count it, and repeat the loop
if(D.num >= death){
if(result == "NA"){
result <- 1}  # Cheat to reset result
result <- result + 1
}
enum <- enum + 1  # Enumerator for the loop
}
# Calculate sperimental probability and return values
if(result == "NA"){
cat("It is impossible to die by drawing", death, "death cards.")
}else{
probability <- result/repe*100
cat("The probability to draw ", death, " death cards is ", probability, "%\n",
sep = "")
return(invisible(probability))
}
# Return values
}
cards(25, 1, 6, 3)
cards <- function(norm, damage, draw, death, repe = 250000){
# Calculate (roughly) the probability to draw >= "Death" "damage" cards in a
# single hand of size "draw"
# Create the deck
deck <- c(rep("C", norm), rep("D", damage))
result <- "NA"
enum <- 0
# Errors and warnings
if(length(deck) < draw | length(deck) < death){
stop("Deck length too little")
}
if(repe < 100000){
warning("Repetitions might not be enough for a correct result")
}
# repeat as long as enumerator is less than repetition counter:
while(enum < repe){
# Draw (sample) the deck
x <- sample(deck, draw, replace = FALSE)
# How many death cards have been drawn?
D.num <- length(subset(x, x == "D"))
# If death cards lead to a death, count it, and repeat the loop
if(D.num >= death){
if(result == "NA"){
result <- 1}  # Cheat to reset result
result <- result + 1
}
enum <- enum + 1  # Enumerator for the loop
}
# Calculate sperimental probability and return values
if(result == "NA"){
cat("It is impossible to die by drawing", death, "death cards.")
}else{
probability <- result/repe*100
cat("The probability to draw ", death, " death cards is ", probability, "%\n",
sep = "")
return(invisible(probability))
}
}
cards(25, 1, 6, 3)
cards(0, 25, 6, 3)
cards(4, 25, 6, 3)
cards(3, 25, 6, 3)
cards <- function(norm, damage, draw, death, repe = 250000){
# Calculate (roughly) the probability to draw >= "Death" "damage" cards in a
# single hand of size "draw"
# Create the deck
deck <- c(rep("C", norm), rep("D", damage))
result <- "NA"
enum <- 0
# Errors and warnings
if(length(deck) < draw | length(deck) < death){
stop("Deck length too little")
}
if(repe < 100000){
warning("Repetitions might not be enough for a correct result")
}
# End early if there are not enough normal cards to prevent a death
if(norm < draw-death){
cat("It is certain death in these conditions.")
return(invisible(NA))
}
# repeat as long as enumerator is less than repetition counter:
while(enum < repe){
# Draw (sample) the deck
x <- sample(deck, draw, replace = FALSE)
# How many death cards have been drawn?
D.num <- length(subset(x, x == "D"))
# If death cards lead to a death, count it, and repeat the loop
if(D.num >= death){
if(result == "NA"){
result <- 1}  # Cheat to reset result
result <- result + 1
}
enum <- enum + 1  # Enumerator for the loop
}
# Calculate sperimental probability and return values
if(result == "NA"){
cat("It is impossible to die by drawing", death, "death cards.")
}else{
probability <- result/repe*100
cat("The probability to draw ", death, " death cards is ", probability, "%\n",
sep = "")
return(invisible(probability))
}
}
cards(3, 25, 6, 3)
cards(2, 25, 6, 3)
cards <- function(norm, damage, draw, death, repe = 250000){
# Calculate (roughly) the probability to draw >= "Death" "damage" cards in a
# single hand of size "draw"
# Create the deck
deck <- c(rep("C", norm), rep("D", damage))
result <- "NA"
enum <- 0
# Errors and warnings
if(length(deck) < draw | length(deck) < death){
stop("Deck length too little")
}
if(repe < 100000){
warning("Repetitions might not be enough for a correct result")
}
# End early if there are not enough normal cards to prevent a death
if(norm <= draw-death){
cat("It is certain death in these conditions.")
return(invisible(NA))
}
# repeat as long as enumerator is less than repetition counter:
while(enum < repe){
# Draw (sample) the deck
x <- sample(deck, draw, replace = FALSE)
# How many death cards have been drawn?
D.num <- length(subset(x, x == "D"))
# If death cards lead to a death, count it, and repeat the loop
if(D.num >= death){
if(result == "NA"){
result <- 1}  # Cheat to reset result
result <- result + 1
}
enum <- enum + 1  # Enumerator for the loop
}
# Calculate sperimental probability and return values
if(result == "NA"){
cat("It is impossible to die by drawing", death, "death cards.")
}else{
probability <- result/repe*100
cat("The probability to draw ", death, " death cards is ", probability, "%\n",
sep = "")
return(invisible(probability))
}
}
cards(3, 25, 6, 3)
cards <- function(norm, damage, draw, death, repe = 250000){
# Calculate (roughly) the probability to draw >= "Death" "damage" cards in a
# single hand of size "draw"
# Create the deck
deck <- c(rep("C", norm), rep("D", damage))
result <- "NA"
enum <- 0
# Errors and warnings
if(length(deck) < draw | length(deck) < death){
stop("Deck length too little")
}
if(repe < 100000){
warning("Repetitions might not be enough for a correct result")
}
# End early if there are not enough normal cards to prevent a death
if(norm <= draw-death){
cat("It is certain death in these conditions.")
return(invisible(100))
}
# repeat as long as enumerator is less than repetition counter:
while(enum < repe){
# Draw (sample) the deck
x <- sample(deck, draw, replace = FALSE)
# How many death cards have been drawn?
D.num <- length(subset(x, x == "D"))
# If death cards lead to a death, count it, and repeat the loop
if(D.num >= death){
if(result == "NA"){
result <- 1}  # Cheat to reset result
result <- result + 1
}
enum <- enum + 1  # Enumerator for the loop
}
# Calculate sperimental probability and return values
if(result == "NA"){
cat("It is impossible to die by drawing", death, "death cards.")
}else{
probability <- result/repe*100
cat("The probability to draw ", death, " death cards is ", probability, "%\n",
sep = "")
return(invisible(probability))
}
}
cards(3, 25, 6, 3)
cards(3, 25, 6, 3) -> banana
banana
cards(15, 25, 6, 3)
cards(30, 25, 6, 3)
lista <- list(c("A", "A", "A", "G"),
c("B", "G", "G", "G"),
c("C", "A", "C", "A"),
c("D", "T", "A", "G")
)
lista
subset(lista[[1]], lista[[1]] == "G")
subset(lista[[2]], lista[[2]] == "G")
subset(lista, lista == "G")
for (i in lista){
subset(lista[[i]], lista[[i]] == "G")
}
for (i in lista){
subset(lista[[i]], lista[[i]] == "G")
}
for (i in lista[[i]]){
subset(lista[[i]], lista[[i]] == "G")
}
for (i in lista){
subset(lista[[i]], lista[[i]] == "G")
}
for (i in lista){
subset(lista[i], lista[i] == "G")
}
for (i in lista){
print(subset(lista[i], lista[i] == "G"))
}
lapply(lista, function x(X){
subset(x, x == "G")
})
lapply(lista, function x(x){
subset(x, x == "G")
})
lapply(lista, function fu(x){
subset(x, x == "G")
})
lapply(lista, function fu(x){subset(x, x == "G")})
lapply(lista, function fu(x){subset(x, x == "G")})
lapply(lista, function(x){subset(x, x == "G")})
read.csv("C:\Users\hedma\Desktop\ZE dati.csv")
library(readr)
ZE_dati <- read_csv("C:/Users/hedma/Desktop/ZE dati.csv")
View(ZE_dati)
View(ZE_dati)
read.csv("C:/Users/hedma/Desktop/ZE dati.csv") -> Dati
read.csv2("C:/Users/hedma/Desktop/ZE dati.csv") -> Dati
Dati
lapply(shapiro.test, Dati)
lapply(Dati, shapiro.test)
subset(Dati, Dati$ï..DensitÃ. == 2) -> C
subset(Dati, Dati$ï..DensitÃ. == 4) -> Q
subset(Dati, Dati$ï..DensitÃ. == 12) -> Q
subset(Dati, Dati$ï..DensitÃ. == 4) -> Q
subset(Dati, Dati$ï..DensitÃ. == 12) -> P
C
shapiro.test(C$Media)
shapiro.test(P$Media)
shapiro.test(Q$Media)
bartlett.test(C$Media)
bartlett.test(C[,c(2,3,4)])
bartlett.test(Q[,c(2,3,4)])
bartlett.test(P[,c(2,3,4)])
anova(lm(Dati$Media~Dati$ï..DensitÃ.))
Dati_pi <- Dati$Media/Dati$ï..DensitÃ.
anova(lm(Dati_pi~Dati$ï..DensitÃ.))
pairwise.t.test(Dati_pi~Dati$ï..DensitÃ., adj="bonferroni")
pairwise.t.test(Dati_pi ~ Dati$ï..DensitÃ., adj="bonferroni")
pairwise.t.test(Dati_pi~Dati$ï..DensitÃ., adj="bonferroni")
t.test(Dati_pi~Dati$ï..DensitÃ.)
pairwise.t.test(Dati_pi~Dati$ï..DensitÃ., adj="bonferroni")
pairwise.t.test(Dati_pi, Dati$ï..DensitÃ., adj="bonferroni")
pairwise.t.test(Dati_pi, Dati$ï..DensitÃ., p.adj="bonf")
plot(cars)
print("Hello!")  # This prints hello. This comment is ignored by R
# print("Hello!") This will do nothing, as it is in a comment.
unlink('Brief Introduction to R_cache', recursive = TRUE)
c("Ciao!", 2)
Inf
Inf + 2
matrix(2,2)
matrix(c(2,2))
mean(c(1,2,3,0))
x <- 1:10
x > 2 & x < 6 # Meaning "Where x is more than 2 AND less than 6"
x <= 3 | >= 7 # Meaning "Where x is less or equal to 3 OR greater or equal to 7"
x <- 1:10
x > 2 & x < 6 # Meaning "Where x is more than 2 AND less than 6"
x <= 3 | x >= 7 # Meaning "Where x is less or equal to 3 OR greater or equal to 7"
x <- 1:10
x > 2 & x < 6 # Meaning "Where x is more than 2 AND less than 6"
x <= 3 | x >= 7 # Meaning "Where x is less or equal to 3 OR greater or equal to 7"
dim(1)
x <- matrix(4, 5, 1:20)
x[1,3]
x <- matrix(nr = 4, nc = 5, data = 1:20)
x[1,3]
x[2,]  # Not giving an index selects the whole row or column
x[,4]
x[c(2,3), 5]
x[, c(3, 1, 5)]
x <- matrix(1:20, 4, 5)
x[1,3]
x[2,]  # Not giving an index selects the whole row or column
x[,4]
x[c(2,3), 5]
x[, c(3, 1, 5)]
